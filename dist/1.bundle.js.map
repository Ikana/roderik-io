{"version":3,"sources":["webpack:///./node_modules/ric/src/ric-polyfill.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8F","file":"1.bundle.js","sourcesContent":["/**\n * Created by Denis Radin aka PixelsCommander\n * http://pixelscommander.com\n *\n * Polyfill is build around the principe that janks are most harmful to UX when user is continously interacting with app.\n * So we are basically preventing operation from being executed while user interacts with interface.\n * Currently this implies scrolls, taps, clicks, mouse and touch movements.\n * The condition is pretty simple - if there were no interactions for 300 msec there is a huge chance that we are in idle.\n */\n\nvar applyPolyfill = function () {\n    //By default we may assume that user stopped interaction if we are idle for 300 miliseconds\n    var IDLE_ENOUGH_DELAY = 300;\n    var timeoutId = null;\n    var callbacks = [];\n    var lastInteractionTime = Date.now();\n    var deadline = {\n        timeRemaining: IDLE_ENOUGH_DELAY\n    };\n\n    var isFree = function () {\n        return timeoutId === null;\n    }\n\n    var onContinousInteractionStarts = function (interactionName) {\n        deadline.timeRemaining = 0;\n        lastInteractionTime = Date.now();\n\n        if (!timeoutId) {\n            timeoutId = setTimeout(timeoutCompleted, IDLE_ENOUGH_DELAY);\n        }\n    }\n\n    var onContinousInteractionEnds = function (interactionName) {\n        clearTimeout(timeoutId);\n        timeoutId = null;\n\n        for (var i = 0; i < callbacks.length; i++) {\n            executeCallback(callbacks[i])\n        }\n    }\n\n    //Consider categorizing last interaction timestamp in order to add cancelling events like touchend, touchleave, touchcancel, mouseup, mouseout, mouseleave\n    document.addEventListener('keydown', onContinousInteractionStarts.bind(this, 'keydown'));\n    document.addEventListener('mousedown', onContinousInteractionStarts.bind(this, 'mousedown'));\n    document.addEventListener('touchstart', onContinousInteractionStarts.bind(this, 'touchstart'));\n    document.addEventListener('touchmove', onContinousInteractionStarts.bind(this, 'touchmove'));\n    document.addEventListener('mousemove', onContinousInteractionStarts.bind(this, 'mousemove'));\n    document.addEventListener('scroll', onContinousInteractionStarts.bind(this, 'scroll'), true);\n\n\n    var timeoutCompleted = function () {\n        var expectedEndTime = lastInteractionTime + IDLE_ENOUGH_DELAY;\n        var delta = expectedEndTime - Date.now();\n\n        if (delta > 0) {\n            timeoutId = setTimeout(timeoutCompleted, delta);\n        } else {\n            onContinousInteractionEnds();\n        }\n    }\n\n    var createCallbackObject = function (callback, timeout) {\n        var callbackObject = {\n            callback: callback,\n            timeoutId: null\n        };\n\n        callbackObject.timeoutId = timeout !== null ? setTimeout(executeCallback.bind(this, callbackObject), timeout) : null;\n\n        return callbackObject;\n    }\n\n    var addCallback = function (callbackObject, timeout) {\n        callbacks.push(callbackObject);\n    }\n\n    var executeCallback = function (callbackObject) {\n        var callbackIndex = callbacks.indexOf(callbackObject);\n\n        if (callbackIndex !== -1) {\n            callbacks.splice(callbacks.indexOf(callbackObject), 1);\n        }\n\n        callbackObject.callback(deadline);\n\n        if (callbackObject.timeoutId) {\n            clearTimeout(callbackObject.timeoutId);\n            callbackObject.timeoutId = null;\n        }\n    }\n\n    return function (callback, options) {\n        var timeout = (options && options.timeout) || null;\n        var callbackObject = createCallbackObject(callback, timeout);\n\n        if (isFree()) {\n            executeCallback(callbackObject);\n        } else {\n            addCallback(callbackObject);\n        }\n    };\n};\n\nif (!window.requestIdleCallback) {\n    window.ricActivated = true;\n    window.requestIdleCallback = applyPolyfill();\n}\n\nwindow.requestUserIdle = window.ricActivated && window.requestIdleCallback || applyPolyfill();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ric/src/ric-polyfill.js\n// module id = 41\n// module chunks = 1"],"sourceRoot":""}